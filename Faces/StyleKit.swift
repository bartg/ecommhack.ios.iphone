//
//  StyleKit.swift
//  SharkList
//
//  Created by SharkList on 22.04.2015.
//  Copyright (c) 2015 SharkList. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var gray1: UIColor = UIColor(red: 0.788, green: 0.843, blue: 0.925, alpha: 1.000)
        static var gray2: UIColor = UIColor(red: 0.659, green: 0.710, blue: 0.784, alpha: 1.000)
        static var notification: UIColor = UIColor(red: 0.353, green: 0.733, blue: 0.984, alpha: 1.000)
        static var links: UIColor = UIColor(red: 0.102, green: 0.506, blue: 0.541, alpha: 1.000)
        static var dark1: UIColor = UIColor(red: 0.125, green: 0.298, blue: 0.435, alpha: 1.000)
        static var dark2: UIColor = UIColor(red: 0.075, green: 0.220, blue: 0.325, alpha: 1.000)
        static var dark3: UIColor = UIColor(red: 0.063, green: 0.161, blue: 0.255, alpha: 1.000)
        static var dark4: UIColor = UIColor(red: 0.059, green: 0.125, blue: 0.208, alpha: 1.000)
        static var white: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static var gradient: CGGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [StyleKit.dark1.CGColor, StyleKit.dark4.CGColor], [0, 1])
    }

    //// Colors

    public class var gray1: UIColor { return Cache.gray1 }
    public class var gray2: UIColor { return Cache.gray2 }
    public class var notification: UIColor { return Cache.notification }
    public class var links: UIColor { return Cache.links }
    public class var dark1: UIColor { return Cache.dark1 }
    public class var dark2: UIColor { return Cache.dark2 }
    public class var dark3: UIColor { return Cache.dark3 }
    public class var dark4: UIColor { return Cache.dark4 }
    public class var white: UIColor { return Cache.white }

    //// Gradients

    public class var gradient: CGGradient { return Cache.gradient }

    //// Drawing Methods

    public class func drawBackground1(#frame: CGRect) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Rectangle Drawing
        let rectangleRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)
        let rectanglePath = UIBezierPath(rect: rectangleRect)
        CGContextSaveGState(context)
        rectanglePath.addClip()
        CGContextDrawLinearGradient(context, StyleKit.gradient,
            CGPointMake(rectangleRect.midX, rectangleRect.minY),
            CGPointMake(rectangleRect.midX, rectangleRect.maxY),
            0)
        CGContextRestoreGState(context)
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
